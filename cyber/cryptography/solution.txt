-open apache2 server, with a servername (I chose infinity.test, configure hosts file to define infinity.test as an alternative name for 127.0.0.1)

-set redirect from port 80 to port 443

-turn SSLEngine on for port 443 to enable https


Exercise 2:

-Create CA:
	openssl genrsa -des3 -out <CA name>.key 2048
	openssl req -x509 -new -nodes -key <CA name>.key -sha256 -days 365 -out <CA name>.crt

-install root cert in ubuntu:
	copy <CA name>.crt to /usr/local/share/ca-certificates/
	sudo update-ca-certificates

-Create certificate for website:
	openssl genrsa -out <Site crt name>.key 2048
	openssl req -new -key <Site crt name>.key -out <Site crt name>.csr
	create cert extension config to define SAN for the cert - <Site crt name>.ext with the server name
	openssl x509 -req -in <Site crt name>.csr -CA <CA crt> -CAkey <CA key> -CAcreateserial -out <Site crt name>.crt -days 365 -sha256 -extfile <Site crt name>.ext
	
-Load CA crt to firefox:
certutil -A -n <CA nickname> -t "TC,," -i <CA crt path> -d sql:<Firefox root profile path>

-Add certificate paths to apache2 config file

sites used:
https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/
https://dev.to/lmillucci/firefox-installing-self-signed-certificate-on-ubuntu-4f11

Exercise 3a:

-Create new CA

-Create client cert:
	openssl genrsa -des3 -out <Client>.key 2048
	openssl req -new -key <Client>.key -out <Client>.csr
	openssl x509 -req -in <Client>.csr -CA <NewCA>.crt -CAkey <NewCA>.key -set_serial 101 -days 365 -out <Client>.crt
	
-Block access to "./certified/" for all clients not holding a cert signed by <NewCa>:
	on apache conf file:
		
		SSLCACertificateFile /path/to/newCA.crt
		SSLVerifyClient none
		
		<Directory "/path/to/protected/directory">
		 SSLVerifyClient require
		 SSLVerifyDepth 2
		</Directory>
	

-export the cert to test authenticated connection:
	openssl pkcs12 -export -inkey <Client>.key -in <Client>.crt -out <Client>.p12

-install the .p12 file into the browser (and dont forget to enable security.tls.enable_post_handshake_auth to True)

-???

-profit

Exercise 3b:

-Create new CA

-Create client cert containing common name "cyber"

-Block access to "./bystring/" for all clients with common name not containing "cyber":

	<Directory "/var/www/html/bystring/">
	 SSLVerifyClient require
	 SSLVerifyDepth 2
	 SSLRequire %{SSL_CLIENT_S_DN_CN} =~ m#(cyber)#
	</Directory>
	
-export the cert to test authenticated connection	

-install the .p12 file into the browser (and dont forget to enable security.tls.enable_post_handshake_auth to True)

-???

-profit

Exercise 4:

-Create new GPG key:
	gpg --full-generate-key
	
-export the public key to a txt file:
	gpg --armor --export <KeyID> > /path/to/file.txt
	
-create a file and encrypt it:
	gpg --output <encrypted_name>.gpg --encrypt --recipient <recipient_email> /path/to/file/to/encrypt
	
(to decrypt: gpg --output /path/to/file/to/decrypted.txt --decrypt <encrypted_name>.gpg)

-sign the file with compression:
	gpg --sign --compress-algo zip -o <signed_file>.txt /path/to/input
	
-verify the signature:
	gpg --verify /path/to/signed/file
	
-sign the file without compression:
	gpg --sign -z 0 -o <signed_file>.txt /path/to/input

-verify the signature

-sign the file with detached:
	gpg --detach-sign --compress-algo zip -o <signed_file>.txt /path/to/input
	
-verify the signature
